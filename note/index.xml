<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on Wonsup Yoon</title>
    <link>https://yoon.ws/note/</link>
    <description>Recent content in Notes on Wonsup Yoon</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Feb 2025 19:52:56 +0900</lastBuildDate>
    <atom:link href="https://yoon.ws/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>노트 중심 연구 방법</title>
      <link>https://yoon.ws/note/note-driven-research/</link>
      <pubDate>Sun, 29 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/note-driven-research/</guid>
      <description>&lt;p&gt;나의 박사과정의 상당 부분은 &amp;ldquo;노트&amp;quot;를 작성하는 것이었다.&#xA;연구노트, 회의록, 아이디어 노트 등 다양한 종류의 노트가 있겠지만,&#xA;내가 말하고자 하는 노트는 이들의 목적 모두를 어느 정도 대체할 수 있기 때문에 이 글에서는 그저 노트라 지칭한다.&lt;/p&gt;&#xA;&lt;p&gt;나는 본격적으로 연구를 시작할 때인 석사 2학년(2019년 1월)부터 지금까지 꾸준하게 이 노트를 주기적으로(대개 주 1회) 작성해 왔고, 돌이켜보면 이 습관이 내가 연구를 꾸준히 할 수 있었던 원동력이지 않았나 싶다.&lt;/p&gt;&#xA;&lt;p&gt;박사과정을 마무리해 가는 지금, 나의 연구 방법인 &amp;ldquo;노트 중심 연구 방법&amp;quot;을 정리하여 소개해 본다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>비동기 프로그래밍 개념들</title>
      <link>https://yoon.ws/note/async-programming-concepts/</link>
      <pubDate>Sat, 07 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/async-programming-concepts/</guid>
      <description>&lt;p&gt;비동기 프로그래밍을 편하게 하기 위해 다양한 프로그래밍 언어적 기능과 라이브러리들이 존재한다.&#xA;많은 경우 각 개념들이 엄밀하지 않게 사용되는 경우가 많은데, 이 글에서는 되도록 원전을 찾아보고 각 개념을 엄밀히 정의해본다.&#xA;또한, 각 개념들이 처음 제안되었을 때의 의미와 다르게 현대에 사용될 수도 있다.&#xA;이 또한 반영하려 노력해본다.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 다음과 같은 개념들을 조사한다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Event-driven programming&lt;/li&gt;&#xA;&lt;li&gt;Coroutine&lt;/li&gt;&#xA;&lt;li&gt;Event Loop and Handlers&lt;/li&gt;&#xA;&lt;li&gt;Callback&lt;/li&gt;&#xA;&lt;li&gt;Promise and Future&lt;/li&gt;&#xA;&lt;li&gt;Async/await&lt;/li&gt;&#xA;&lt;li&gt;CSP Model&lt;/li&gt;&#xA;&lt;li&gt;Actor Model&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;event-driven-programming&#34;&gt;Event-Driven Programming&lt;/h2&gt;&#xA;&lt;p&gt;이 글에서 설명하는 event-driven은 thread-driven vs. event-driven 문맥에서 event-driven을 지칭한다.&#xA;과거에는 thread 기반 프로그래밍과 event-driven 프로그래밍 모델 사이의 여러 논쟁이 있었으며&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, 이는 더 오래전부터 논의되어 온 procedure-oriented 시스템과 message-oriented 시스템의 이름 정도만 다른 것으로 보인다&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. 이에 따라 각 용어를 정의하면 다음과 같다. 괄호 안에는 논문이 작성될 당시에는 없거나 이 문맥에서 사용되지 않았던 개념으로 설명을 위해 추가하였다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>실행 단위 (Execution Unit) 정리</title>
      <link>https://yoon.ws/note/execution-units/</link>
      <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/execution-units/</guid>
      <description>&lt;p&gt;Paralellism과 concurrency를 지원하기 위해 다양한 실행 단위(Execution Unit)가 존재한다.&#xA;가장 기초적인 프로세스와 스레드부터 그린 스레드(green thread), 코루틴(coroutine), 파이버(fiber) 등 비교적 일반적 개념과, 고루틴(Goroutine)처럼 특정 언어에만 존재하는 개념도 존재한다.&#xA;상당수의 기술 문서, 대화에서 이들 개념이 명확히 구분되지 않고 사용되고, 때로는 잘못 사용되는 경우도 많다.&lt;/p&gt;&#xA;&lt;p&gt;이를 명확히 &lt;a href=&#34;https://stackoverflow.com/questions/3324643/processes-threads-green-threads-protothreads-fibers-coroutines-whats-the&#34;&gt;구분하려는 글&lt;/a&gt;은 몇 존재하지만, 그다지 만족스럽지 않아서 새로 정리해 본다.&#xA;되도록 각 개념을 최초로 소개하는 논문 혹은 문서를 참고하려고 했으며, 그 글에서 기존 방식과의 차이가 기술되어 있으면 이를 중점으로 소개한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>QCNFA765을 이용한 Wi-Fi 6 AP</title>
      <link>https://yoon.ws/note/qcnfa765-wifi-6-ap/</link>
      <pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/qcnfa765-wifi-6-ap/</guid>
      <description>&lt;h2 id=&#34;qcnfa765&#34;&gt;QCNFA765&lt;/h2&gt;&#xA;&lt;p&gt;최근에 알리익스프레스에서 WCN6855를 사용한 QCNFA765이 $20 내외로 판매되고 있다는 것을 발견했다.&#xA;WCN6855은 Wi-Fi 6(802.11ax)는 물론, 6GHz를 사용하는 Wi-Fi 6E도 지원하여, 사용하고 있던 QCA6174보다 더 좋은 성능을 기대할 수 있다.&#xA;또, 두 개 이상의 주파수 대역을 사용하여 성능을 높이는 DBS(dual band simultaneous)도 사용할 수 있어, 6GHz를 지원하는 장비는 성능을 거의 두 배 가까이 올릴 수도 있을 것으로 판단했다.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 QCNFA765를 구매하여 Wi-Fi 6 AP로 사용할 때 발생한 시행착오를 소개한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DIY Wi-Fi 라우터</title>
      <link>https://yoon.ws/note/diy-wifi-router/</link>
      <pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/diy-wifi-router/</guid>
      <description>&lt;h2 id=&#34;diy-wi-fi-라우터-제작&#34;&gt;DIY Wi-Fi 라우터 제작&lt;/h2&gt;&#xA;&lt;p&gt;이 글에서는 개인적으로 사용하는 Wi-Fi 라우터를 소개한다.&#xA;일반적인 라우터와 달리 Intel 기반의 미니 PC에 Debian Linux 기반으로 직접 제작하여 커스터미이징이 쉽고 높은 성능을 제공한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;목적&#34;&gt;목적&lt;/h2&gt;&#xA;&lt;p&gt;기성 Wi-Fi 라우터는 낮은 가격에 쓸만한 성능, 전력효율을 제공한다.&#xA;하지만, 대부분의 기성 라우터는 제조사가 제공하는 펌웨어만을 강제한다. &lt;a href=&#34;https://openwrt.org&#34;&gt;OpenWRT&lt;/a&gt;와 같은 커스텀 펌웨어를 사용하더라도 완전히 커스터마이즈하여 사용하기에는 한계가 있다.&lt;/p&gt;&#xA;&lt;p&gt;그래서, 직접 Wi-Fi 라우터를 만들기로 결심했다.&#xA;또, 새로 만드는 김에 기존에 개인적으로 사용하던 홈서버와 통합하여, 홈서버가 Wi-Fi 라우터 기능을 제공하는 것을 목표로 했다.&#xA;그 밖에 다음과 같은 목표들을 정하고 Wi-Fi 라우터 제작을 시작했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>KENS 리뉴얼 Part 3: 지속이 가능한 에코시스템과 남은 과제</title>
      <link>https://yoon.ws/note/kens-renewal-part3/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/kens-renewal-part3/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ANLAB-KAIST/KENSv3&#34;&gt;Source code available&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://yoon.ws/note/kens-renewal-part1/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://yoon.ws/note/kens-renewal-part2/&#34;&gt;Part 2&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;지속가능성&#34;&gt;지속가능성&lt;/h2&gt;&#xA;&lt;p&gt;언제까지고 내가 KENS 수업 조교를 할 수는 없다.&#xA;다음에 다른 조교가 쉽게 조교 활동을 할 수 있도록 개편하여 지속이 가능한 에코시스템을 개발하는 것이 이번 리뉴얼의 마지막 목표였다.&#xA;이를 위해서 KENS 과제 자료를 문서화, 조교 활동에 수반하는 반복적인 작업을 자동화, 그리고 지식 베이스 조성을 시도하였다.&#xA;모든 것이 완벽하다고 할 수는 없지만, 어느 정도 성과가 있어 이를 공유한다.&#xA;마지막으로, 현재까지 개발된 KENS의 한계점과 향후 개선 방향에 대하여 정리해 보았다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>KENS 리뉴얼 Part 2: 개발 환경과 빌드 시스템</title>
      <link>https://yoon.ws/note/kens-renewal-part2/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/kens-renewal-part2/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ANLAB-KAIST/KENSv3&#34;&gt;Source code available&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://yoon.ws/note/kens-renewal-part1/&#34;&gt;Part 1&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kens-개발-환경&#34;&gt;KENS 개발 환경&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ANLAB-KAIST/KENSv3/tree/v3.0&#34;&gt;기존 KENS 시스템&lt;/a&gt;은 과제를 수행하기 위한 개발 환경을 셋업하는 것이 학생들에게 조금 까다로웠다.&#xA;KENS 개발 환경의 빌드 시스템은 순수 Makefile 이루어져 있고, 빌드 시 &lt;a href=&#34;https://google.github.io/googletest/&#34;&gt;GoogleTest&lt;/a&gt; 라이브러리를 설치해 주어야 하므로, C/C++을 처음 혹은 두 번째로 사용하는 학생들은 이 둘에 익숙하지 못하다.&#xA;따라서, 학생 중 상당수가 과제를 시작하는 데 어려움을 겪고 관련 질의응답도 많이 있었다.&lt;/p&gt;&#xA;&lt;p&gt;이 문제의 질의응답이 어려운 점은 학생들의 개발 환경이 매우 다양하다는 점이다.&#xA;많은 학생이 리눅스가 아닌 macOS와 Windows를 사용하고 있고, 리눅스를 사용하더라도 배포판, GCC 및 GoogleTest 버전 등 개발 환경이 다양하기 때문이다.&#xA;또, 학생들이 질문을 할 때부터 필요한 정보를 제공하지 않아 여러 번 질문해야 하는 경우도 많아 조교들의 부담도 컸었다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>KENS 리뉴얼 Part 1: 메모리 안전성</title>
      <link>https://yoon.ws/note/kens-renewal-part1/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/kens-renewal-part1/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ANLAB-KAIST/KENSv3&#34;&gt;Source code available&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kens&#34;&gt;KENS&lt;/h2&gt;&#xA;&lt;p&gt;KAIST 전산망 개론 수업에서는 KENS(KAIST Educational Network System)라는 네트워크 교육용 시스템을 활용한다.&#xA;학생들은 KENS를 이용하여 기초적인 TCP 스택을 구현하는 과제를 수행하며, 이 과제는 전체 수업 과정 중에 상당한 부분을 차지한다.&#xA;하지만, 내가 조교 활동을 준비하고 있을 때(2020년 여름)는 KENS 과제에 여러 문제가 누적되어 있었으며, 이 글과 후속 글에서는 조교 활동 및 준비 기간(2020년 여름 ~ 2022년 여름) 동안, KENS가 개선된 내용을 일부 소개한다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;메모리-안전성&#34;&gt;메모리 안전성&lt;/h2&gt;&#xA;&lt;p&gt;학생들이 과제를 진행하면 가장 많이 겪는 문제는 메모리 관련 버그이다.&#xA;전산망 개론은 주로 3학년 학생들이 주로 수강하기 때문에, 학생들은 아직 운영체제 등의 수업을 수강하지 않은 상태로 과제를 수행하게 된다.&#xA;더욱이, KAIST의 프로그래밍 기초 및 데이터 구조 과목은 대부분 Python 혹은 Java로 진행되고, C 혹은 C++는 시스템프로그래밍 과목에서 잠깐만 사용하기 때문에, 학생들은 수동으로 메모리를 관리하는 데 익숙하지 못한 상태다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CS 분야 우수 학술대회 목록</title>
      <link>https://yoon.ws/note/cs-top-conferences/</link>
      <pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/cs-top-conferences/</guid>
      <description>&lt;p&gt;URL: &lt;a href=&#34;https://wsyo.one/csconf&#34;&gt;https://wsyo.one/csconf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;과제 실적 정리 등으로 CS 분야 우수 학술대회 목록을 사용해야 할 때가 있다.&#xA;한국에서 자주 사용되는 목록으로는 한국정보과학회, BK21플러스, KAIST, 서울대, 포항공대에서 관리하는 목록이 있는데,&#xA;관련 목록을 쉽게 확인할 수 있도록 정리하였다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>USE 방법론과 RED 방법론</title>
      <link>https://yoon.ws/note/use-method-and-red-method/</link>
      <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/use-method-and-red-method/</guid>
      <description>&lt;p&gt;시스템의 성능을 분석하는 기법 중 &lt;a href=&#34;https://www.brendangregg.com/usemethod.html&#34;&gt;USE 방법론(the USE method)&lt;/a&gt;과 &lt;a href=&#34;https://grafana.com/blog/2018/08/02/the-red-method-how-to-instrument-your-services/&#34;&gt;RED 방법론(the RED method)&lt;/a&gt; 이 널리 알려져 있다.&#xA;본 글에서는 이 두 방법론을 간단하게 소개하고, 차이점과 장단점을 분석해 본다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;use-방법론-the-use-method&#34;&gt;USE 방법론 (The USE Method)&lt;/h2&gt;&#xA;&lt;p&gt;시스템을 개발하고 관리하다 보면, 시스템이 종종 기대치에 못 미치는 성능을 보여주는 &lt;em&gt;성능 이슈&lt;/em&gt;에 직면하게 된다.&#xA;복잡한 시스템에서는, 왜 혹은 시스템의 어떤 부분이 이러한 성능 이슈를 발생시키는지를 찾기는 조금 어려울 수 있다.&lt;/p&gt;&#xA;&lt;p&gt;USE 방법론은 성능 이슈를 빠르게 해결하기 위하여 Brendan Gregg가 고안한 방법이다.&#xA;이 방법론은 간단하면서도 복잡한 시스템에서 적용 가능하기 때문에 많은 시스템에서 USE 방법론을 이용하고 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>DinV (Docker-in-VM)</title>
      <link>https://yoon.ws/note/dinv/</link>
      <pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/dinv/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Pusnow/dinv&#34;&gt;Source code available&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;간혹 Docker를 Docker 컨테이너 안에서 실행시켜야 하는 경우가 있다.&#xA;특히, CI 서비스(&lt;a href=&#34;https://plugins.jenkins.io/docker-plugin/&#34;&gt;Jenkins Docker&lt;/a&gt;, &lt;a href=&#34;https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action&#34;&gt;GitHub Docker Container Action&lt;/a&gt;, &lt;a href=&#34;https://docs.gitlab.com/runner/executors/docker.html&#34;&gt;GitLab Docker executor&lt;/a&gt;)를 Docker를 통하여 배포할 때, Docker 이미지를 빌드할 수 없는 문제가 생긴다.&#xA;이는 Docker 이미지를 빌드하기 위해 필요한 &lt;code&gt;dockerd&lt;/code&gt; 데몬이 많은 시스템 권한을 요구하기 때문이다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;기존-솔루션&#34;&gt;기존 솔루션&lt;/h2&gt;&#xA;&lt;p&gt;지금까지 &lt;code&gt;dockerd&lt;/code&gt;를 컨테이너 안에서 실행시키기 위해서는 DooD (Docker-out-of-Docker) 혹은 &lt;a href=&#34;https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/&#34;&gt;DinD (Docker-in-Docker)&lt;/a&gt; 기법을 사용한다.&#xA;DooD 기법은 컨테이너 내부에서 호스트 &lt;code&gt;dockerd&lt;/code&gt;에 연결하여 사용하는 기법으로, 이를 위해 도커 컨트롤 소켓(&lt;code&gt;/var/run/docker.sock&lt;/code&gt;)을 bind mount 하여 사용한다.&#xA;이 기법은 컨테이너가 호스트 &lt;code&gt;dockerd&lt;/code&gt;에 대한 거의 모든 접근 권한을 가지기 때문에, 컨테이너 isolation을 회피하여 다른 컨테이너에 영향을 줄 수 있다.&#xA;DinD 기법은 &lt;code&gt;dockerd&lt;/code&gt;를 컨테이너 안에서 실행시키기 위해 privileged 컨테이너를 사용한다. Privileged 컨테이너는 일반 Docker 컨테이너와 달리, &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/run/#full-container-capabilities---privileged&#34;&gt;모든 권한&lt;/a&gt;을 가져간다. 따라서, 호스트가 수행할 수 있는 모든 작업을 시행할 수 있다는 것을 의미한다.&#xA;따라서, DooD와 DinD 모두 실제 사용하기에는 보안 고려사항 때문에 쉽게 적용하기가 어렵다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>비트 스캔 연산자의 Undefined Behavior</title>
      <link>https://yoon.ws/note/undefined-behaviors-of-bit-scan-operators/</link>
      <pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/undefined-behaviors-of-bit-scan-operators/</guid>
      <description>&lt;p&gt;비트 스캔 연산자에는 프로그래머가 주의를 기울이지 않으면 실수 할 수 있는 undefined behavior가 존재한다.&#xA;이 문서에서는 이런 undefined behavior와 이에 따른 버그 및 해결 방안을 알아본다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;비트-스캔-연산자&#34;&gt;비트 스캔 연산자&lt;/h2&gt;&#xA;&lt;p&gt;최신 프로세서에는 비트 스캔 연산자가 존재한다.&#xA;Intel 프로세서의 경우 &lt;code&gt;bsf&lt;/code&gt; (Bit Scan First), &lt;code&gt;bsr&lt;/code&gt; (Bit Scan Reverse) 연산자와 BMI1 확장을 지원한다면 &lt;code&gt;lzcnt&lt;/code&gt; (Leading Zero Count), &lt;code&gt;tzcnt&lt;/code&gt; (Trailing Zero Count) 연산자가 추가로 존재한다.&#xA;이 연산자들은 기본적으로 피연산자를 스캔하여 가장 첫 번째 혹은 마지막 비트의 위치를 추출하는 역할을 한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C Atomic Instruction Mapping</title>
      <link>https://yoon.ws/note/c-atomic-instruction-mapping/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/c-atomic-instruction-mapping/</guid>
      <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Only 64 bits data types&lt;/li&gt;&#xA;&lt;li&gt;Compiler: clang 11.0.1&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://godbolt.org/z/drMsxvGd4&#34;&gt;https://godbolt.org/z/drMsxvGd4&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;mapping-table&#34;&gt;Mapping Table&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Operation&lt;/th&gt;&#xA;          &lt;th&gt;x86-64&lt;/th&gt;&#xA;          &lt;th&gt;armv8-a&lt;/th&gt;&#xA;          &lt;th&gt;RISC-V rv64gc&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Load (no atomic)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov rax, qword ptr [rip + y]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;adrp x8, y&lt;/br&gt;ldr x0, [x8, :lo12:y]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(y)&lt;br/&gt;ld a0, %lo(y)(a0)                                                        &lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Load (implicit)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov rax, qword ptr [rip + x]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;adrp x8, x&lt;/br&gt;add x8, x8, :lo12:x&lt;/br&gt;ldar x0, [x8]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence rw, rw&lt;br/&gt;lui a0, %hi(x)&lt;br/&gt;ld a0, %lo(x)(a0)&lt;br/&gt;fence r, rw&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Load (relaxed)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov rax, qword ptr [rip + x]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;adrp x8, x&lt;/br&gt;ldr x0, [x8, :lo12:x]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;ld a0, %lo(x)(a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Load (consume)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov rax, qword ptr [rip + x]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;adrp x8, x&lt;/br&gt;add x8, x8, :lo12:x&lt;/br&gt;ldar x0, [x8]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;ld a0, %lo(x)(a0)&lt;br/&gt;fence r, rw&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Load (acquire)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov rax, qword ptr [rip + x]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;adrp x8, x&lt;/br&gt;add x8, x8, :lo12:x&lt;/br&gt;ldar x0, [x8]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;ld a0, %lo(x)(a0)&lt;br/&gt;fence r, rw&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Load (release)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Load (acq_rel)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Load (seq_cst)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov rax, qword ptr [rip + x]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;adrp x8, x&lt;/br&gt;add x8, x8, :lo12:x&lt;/br&gt;ldar x0, [x8]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence rw, rw&lt;br/&gt;lui a0, %hi(x)&lt;br/&gt;ld a0, %lo(x)(a0)&lt;br/&gt;fence r, rw&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Store (no atomic)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov qword ptr [rip + y], rdi&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;adrp x8, y&lt;/br&gt;str x0, [x8, :lo12:y]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a1, %hi(y)&lt;br/&gt;sd a0, %lo(y)(a1)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Store (implicit)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;xchg qword ptr [rip + x], rdi&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;adrp x8, x&lt;/br&gt;add x8, x8, :lo12:x&lt;/br&gt;stlr x0, [x8]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence rw, w&lt;br/&gt;lui a1, %hi(x)&lt;br/&gt;sd a0, %lo(x)(a1)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Store (relaxed)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov qword ptr [rip + x], rdi&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;adrp x8, x&lt;/br&gt;str x0, [x8, :lo12:x]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a1, %hi(x)&lt;br/&gt;sd a0, %lo(x)(a1)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Store (consume)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Store (acquire)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Store (release)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov qword ptr [rip + x], rdi&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;adrp x8, x&lt;/br&gt;add x8, x8, :lo12:x&lt;/br&gt;stlr x0, [x8]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence rw, w&lt;br/&gt;lui a1, %hi(x)&lt;br/&gt;sd a0, %lo(x)(a1)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Store (acq_rel)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;Watomic-memory-ordering&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Store (seq_cst)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;xchg qword ptr [rip + x], rdi&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;adrp x8, x&lt;/br&gt;add x8, x8, :lo12:x&lt;/br&gt;stlr x0, [x8]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence rw, w&lt;br/&gt;lui a1, %hi(x)&lt;br/&gt;sd a0, %lo(x)(a1)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Exchange (implicit)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;xchg qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;             adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;  mov w9, #42&lt;br/&gt;.LBB16_1:&lt;br/&gt;  ldaxr x0, [x8]&lt;br/&gt;  stlxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB16_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoswap.d.aqrl a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Exchange (relaxed)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;xchg qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;  adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;  mov w9, #42&lt;br/&gt;.LBB17_1:&lt;br/&gt;  ldxr x0, [x8]&lt;br/&gt;  stxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB17_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoswap.d a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Exchange (consume)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;xchg qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;  adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;  mov w9, #42&lt;br/&gt;.LBB18_1:&lt;br/&gt;  ldaxr x0, [x8]&lt;br/&gt;  stxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB18_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoswap.d.aq a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Exchange (acquire)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;xchg qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;  adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;  mov w9, #42&lt;br/&gt;.LBB19_1:&lt;br/&gt;  ldaxr x0, [x8]&lt;br/&gt;  stxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB19_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoswap.d.aq a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Exchange (release)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;xchg qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;  adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;  mov w9, #42&lt;br/&gt;.LBB20_1:&lt;br/&gt;  ldxr x0, [x8]&lt;br/&gt;  stlxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB20_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoswap.d.rl a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Exchange (acq_rel)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;xchg qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;  adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;  mov w9, #42&lt;br/&gt;.LBB21_1:&lt;br/&gt;  ldaxr x0, [x8]&lt;br/&gt;  stlxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB21_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoswap.d.aqrl a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Exchange (seq_cst)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;xchg qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;  adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;  mov w9, #42&lt;br/&gt;.LBB22_1:&lt;br/&gt;  ldaxr x0, [x8]&lt;br/&gt;  stlxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB22_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoswap.d.aqrl a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Fetch Add (implicit)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;lock xadd qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;  adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;.LBB23_1:&lt;br/&gt;  ldaxr x0, [x8]&lt;br/&gt;  add x9, x0, #42&lt;br/&gt;  stlxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB23_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoadd.d.aqrl a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Fetch Add (relaxed)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;lock xadd qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;  adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;.LBB24_1:&lt;br/&gt;  ldxr x0, [x8]&lt;br/&gt;  add x9, x0, #42&lt;br/&gt;  stxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB24_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoadd.d a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Fetch Add (consume)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;lock xadd qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;  adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;.LBB25_1:&lt;br/&gt;  ldaxr x0, [x8]&lt;br/&gt;  add x9, x0, #42&lt;br/&gt;  stxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB25_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoadd.d.aq a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Fetch Add (acquire)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;lock xadd qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;  adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;.LBB26_1:&lt;br/&gt;  ldaxr x0, [x8]&lt;br/&gt;  add x9, x0, #42&lt;br/&gt;  stxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB26_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoadd.d.aq a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Fetch Add (release)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;lock xadd qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;  adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;.LBB27_1:&lt;br/&gt;  ldxr x0, [x8]&lt;br/&gt;  add x9, x0, #42&lt;br/&gt;  stlxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB27_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoadd.d.rl a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Fetch Add (acq_rel)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;lock xadd qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;  adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;.LBB28_1:&lt;br/&gt;  ldaxr x0, [x8]&lt;br/&gt;  add x9, x0, #42&lt;br/&gt;  stlxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB28_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoadd.d.aqrl a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Fetch Add (seq_cst)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov eax, 42&lt;br/&gt;lock xadd qword ptr [rip + x], rax&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;  adrp x8, x&lt;br/&gt;  add x8, x8, :lo12:x&lt;br/&gt;.LBB29_1:&lt;br/&gt;  ldaxr x0, [x8]&lt;br/&gt;  add x9, x0, #42&lt;br/&gt;  stlxr w10, x9, [x8]&lt;br/&gt;  cbnz w10, .LBB29_1&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;lui a0, %hi(x)&lt;br/&gt;addi a0, a0, %lo(x)&lt;br/&gt;addi a1, zero, 42&lt;br/&gt;amoadd.d.aqrl a0, a1, (a0)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Kill Dependency&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mov rax, qword ptr [rip + x]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;adrp x8, x&lt;br/&gt;add x8, x8, :lo12:x&lt;br/&gt;ldar x0, [x8]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence rw, rw&lt;br/&gt;lui a0, %hi(x)&lt;br/&gt;ld a0, %lo(x)(a0)&lt;br/&gt;fence r, rw&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Thread Fence (relaxed)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Thread Fence (consume)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;dmb ishld&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence r, rw&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Thread Fence (acquire)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;dmb ishld&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence r, rw&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Thread Fence (release)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;dmb ish&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence rw, w&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Thread Fence (acq_rel)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;dmb ish&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence.tso&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Thread Fence (seq_cst)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;mfence&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;dmb ish&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence rw, rw&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Signal Fence (relaxed)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Signal Fence (consume)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence r, rw&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Signal Fence (acquire)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence r, rw&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Signal Fence (release)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence rw, w&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Signal Fence (acq_rel)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence.tso&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Signal Fence (seq_cst)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;fence rw, rw&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>파일시스템의 종류 - 로컬, 네트워크, 분산</title>
      <link>https://yoon.ws/note/distributed-file-system/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/distributed-file-system/</guid>
      <description>&lt;p&gt;Ceph dissertation (Ceph: Reliable, Scalable, and High-performance Distributed Storage, 2007)의 Related Work 부분을 요약 정리하였다.&#xA;당시에는 SSD가 대중화되어있지 않아서, 이 dissertation에서 다루는 디스크는 대부분 하드 디스크이다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;파일시스템의-분류&#34;&gt;파일시스템의 분류&lt;/h2&gt;&#xA;&lt;p&gt;파일시스템은 크게 세 가지로 분류된다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;로컬 파일시스템: 로컬에 장착된 디스크와 상호 작용&lt;/li&gt;&#xA;&lt;li&gt;네트워크 파일시스템 (클라이언트-서버 파일시스템): 원격 서버와 상호 작용&lt;/li&gt;&#xA;&lt;li&gt;분산 파일시스템: 파일시스템의 데이터가 여러 호스트로 분산&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;로컬-파일시스템&#34;&gt;로컬 파일시스템&lt;/h2&gt;&#xA;&lt;p&gt;수십 년간 파일시스템은 Unix 파일시스템과 BSD 유닉스의 Fast 파일시스템 (Fast File System, FFS)에 크게 영향을 받아왔다.&#xA;이의 인터페이스와 행동 시멘틱은 POSIX SUS (Single Unix Specification)으로 표준화되어서, 대부분의 모던 시스템과 애플리케이션에서 활용한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Size of Standard Types</title>
      <link>https://yoon.ws/note/size-of-standard-types/</link>
      <pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/size-of-standard-types/</guid>
      <description>&lt;h2 id=&#34;table&#34;&gt;Table&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Types&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;x86_64 (Linux)&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;x86_64 (Windows)&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;x86_64 (macOS)&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;i386 (Linux)&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;i386 (Windows)&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;aarch64 (Linux)&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;aarch64 (macOS)&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;riscv64 (Linux)&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;short&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;long&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;long long&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;long double&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;16&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;16&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;12&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;16&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;16&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;void*&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;size_t&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;8&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;compilers&#34;&gt;Compilers&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Windows: Visual Studio 2019&lt;/li&gt;&#xA;&lt;li&gt;macOS: Apple Clang 12/13&lt;/li&gt;&#xA;&lt;li&gt;Linux: GCC 8&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;short: %lu&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;int: %lu&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long: %lu&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long long: %lu&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;float: %lu&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;double: %lu&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long double: %lu&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;void*: %lu&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;size_t: %lu&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>한글과 유니코드</title>
      <link>https://yoon.ws/note/hangul-and-unicode/</link>
      <pubDate>Mon, 04 Jul 2016 00:00:00 +0000</pubDate>
      <guid>https://yoon.ws/note/hangul-and-unicode/</guid>
      <description>&lt;p&gt;유니코드에서 한글을 어떻게 다루는지를 정리하였다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;유니코드&#34;&gt;유니코드&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;유니코드(Unicode)는 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현하고 다룰 수 있도록 설계된 산업 표준 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;&#xA;&lt;li&gt;단순히 문자마다 번호를 붙임&lt;/li&gt;&#xA;&lt;li&gt;계속 업데이트되며 현재는 Unicode Version 14.0.0 이 최신&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;utf&#34;&gt;UTF&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;유니코드를 실제 파일 등에 어떻게 기록할 것인지를 표준화한 것이다.&lt;/li&gt;&#xA;&lt;li&gt;유니코드는 문자를 각 숫자에 대응시킨 것에 불과하고 이를 실제 비트로 표현하는 방식은 다양하다&lt;/li&gt;&#xA;&lt;li&gt;UTF-8, UTF-16 등이 있다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;유니코드-속의-한글&#34;&gt;유니코드 속의 한글&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.unicode.org&#34;&gt;Unicode Consortium&lt;/a&gt;의 Version 9.0.0 데이터베이스에 따르면 유니코드에서 한글이 지정된 블록은 다음과 같다.&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
